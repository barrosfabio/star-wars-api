plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.5'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'jacoco'
}

group = 'com.space'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:3.1.5'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis:2.7.5'
	implementation 'org.springframework.boot:spring-boot-starter-cache:2.7.5'
	implementation 'org.springframework.cloud:spring-cloud-starter-sleuth:3.1.2'

	// Lombok
	implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// MapStruct
	implementation 'org.mapstruct:mapstruct:1.5.3.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

	// Tests
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'


}

jacoco {
	toolVersion = "0.8.8"
	reportsDir = file("$buildDir/jacoco")
}

test {
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"com/space/starwars/model/*",
					"com/space/starwars/integration/payload/*",
					"com/space/starwars/config/*",
					"com/space/starwars/exception/payload/*",
			])
		}))
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

